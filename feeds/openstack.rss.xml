<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>The Blog - openstack</title><link>https://ajya.github.io/</link><description></description><lastBuildDate>Sun, 24 Jun 2018 18:00:00 +0300</lastBuildDate><item><title>Outreachy: Adding support for Redfish BIOS resource in sushy</title><link>https://ajya.github.io/outreachy-adding-support-for-redfish-bios-resource-in-sushy.html</link><description>&lt;p&gt;Time flies and this is my 6th week in Outreachy project. 
My first 'big' task is to implement support for BIOS resource in sushy library.&lt;/p&gt;
&lt;p&gt;BIOS resource is one of the Redfish resources beside many others, like Ethernet Interface, Processor which are already implemented in sushy. To shortly describe BIOS resource - it returns a list of BIOS attributes and allows to update them, it also has 2 "actions": Reset the attributes to default value and change BIOS password.&lt;/p&gt;
&lt;p&gt;My starting point was an API scheme PDF&lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP2046_2017.0a.pdf"&gt;[1]&lt;/a&gt; referenced in the ticket and merged patch of Ethernet Interface &lt;a href="https://git.openstack.org/cgit/openstack/sushy/commit/?id=8fe2904a62b0f56dc3fc3fefc5a5a746911ce891"&gt;[2]&lt;/a&gt; which gave me idea which parts of the project I need to touch: implement classes for BIOS resource, add a release note, add a BIOS property to parent resource called System and add unit tests for the new BIOS resource and for new parts of System.&lt;/p&gt;
&lt;p&gt;Sounds straightforward, could take a day or two? Of course it did not.&lt;/p&gt;
&lt;p&gt;One of the first things I encountered was that for action "Change Password" there are no parameters specified. How to pass new password then? Looked around and discovered that the PDF referenced in the ticket is not the latest version. Found the latest version&lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP2046_2018.1_0.pdf"&gt;[3]&lt;/a&gt; released 14 May 2018, after the ticket was created and this spec has parameters for "Change Password": NewPassword, OldPassword and PasswordName. At least this makes sense now, but what to do with those who are still on previous version? At some point in freenode IRC #openstack-ironic channel I asked this question and people there knew that this was issue with generating JSON schemas from CSDL. Turns out there are CSDL files which are schemas in XML and they appear to be source of truth, not JSON. Good to know, but somehow I'm still sticking to JSON and if in doubt look at CSDL. But I started to look more at JSON schemas themselves, rather then generated PDF. For example, BIOS has it schema at &lt;a href="https://redfish.dmtf.org/schemas/Bios.json"&gt;[4]&lt;/a&gt;. There is also Schema index &lt;a href="https://redfish.dmtf.org/redfish/schema_index"&gt;[5]&lt;/a&gt;, but it is easy to guess the URL if know the resource name.
With this resolved I was preparing to submit this patch for code review and while pre-reviewing myself I took another look at sample JSON file for BIOS resource to check if everything is covered. Here is the sample:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;@odata.type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#Bios.v1_0_3.Bios&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;BIOS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;BIOS Configuration Current Settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;AttributeRegistry&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;BiosAttributeRegistryP89.v1_0_0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Attributes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;AdminPhone&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;BootMode&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Uefi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;EmbeddedSata&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Raid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;NicBoot1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NetworkBoot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;NicBoot2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Disabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;PowerProfile&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MaxPerf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ProcCoreDisable&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ProcHyperthreading&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ProcTurboMode&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;UsbControl&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UsbEnabled&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;@Redfish.Settings&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;@odata.type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#Settings.v1_0_0.Settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;ETag&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9234ac83b9700123cc32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Messages&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;MessageId&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Base.1.0.SettingsFailed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;RelatedProperties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;#/Attributes/ProcTurboMode&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;SettingsObject&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;@odata.id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/redfish/v1/Systems/437XR1138R2/BIOS/Settings&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Time&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2016-03-07T14:44.30-05:00&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Actions&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;#Bios.ResetBios&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/redfish/v1/Systems/437XR1138R2/BIOS/Actions/Bios.ResetBios&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;#Bios.ChangePassword&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/redfish/v1/Systems/437XR1138R2/BIOS/Actions/Bios.ChangePassword&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;@odata.context&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/redfish/v1/$metadata#Bios.Bios&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;@odata.id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/redfish/v1/Systems/437XR1138R2/BIOS&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Id&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;AttributeRegistry&lt;/code&gt;, &lt;code&gt;Attributes&lt;/code&gt; covered, &lt;code&gt;Actions&lt;/code&gt; covered, but what is this &lt;code&gt;@Redfish.Settings&lt;/code&gt;? It's not in the schema. I start searching and find this described in Redfish Scalable Platforms Management API Specification&lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.5.0.pdf"&gt;[6]&lt;/a&gt;, this has also HTML version &lt;a href="http://redfish.dmtf.org/schemas/DSP0266_1.5.0.html"&gt;[7]&lt;/a&gt;, it's handier for me. The field is described in section 7.2.2&lt;a href="http://redfish.dmtf.org/schemas/DSP0266_1.5.0.html#settings"&gt;[8]&lt;/a&gt;. Turns out this field is used where resource cannot be updated directly, as is the case for BIOS attributes - updates would require system reboot. Ok, looks like a reusable field. I talk with mentors and we decide this should be implemented as a separate patch to keep the patches smaller and make the BIOS patch dependent on this, a chained patch.
Also speaking of this specification&lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.5.0.pdf"&gt;[6]&lt;/a&gt;&lt;a href="http://redfish.dmtf.org/schemas/DSP0266_1.5.0.html"&gt;[7]&lt;/a&gt;, this is better starting point for all Redfish things than Schema PDF, schema PDF is just a human-readable presentation of JSON/CSDL schemas, but then again if reading this first it might be hard to relate to anything in it.
With only few days in I still was not comfortable with sushy project and was confusing myself how I should implement this re-usable field. In hindsight there is nothing to be confused about, but until I got there I peeked at base modules of sushy library to see what's happening there, otherwise I was just copying whatever was done in Ethernet Interface without really knowing and understanding what's happening under the hood.
One thing to mention, which I did not see at the beginning, is that sushy is not a serialization library that serializes JSON to Python classes and back - it does more. sushy users wouldn't have to know Redfish to use sushy with bare metals. It adds some processing where necessary to make its use handy and hides all the web service details. At least that's how I see it now.&lt;/p&gt;
&lt;p&gt;With the Settings field done and submitted for code review I returned to the original BIOS patch to make it dependent on Settings patch and update to use Settings field. Then I noticed that there might be a thing that should have been implemented differently in Settings patch. The Settings object holds a URI (see &lt;code&gt;SettingsObject/@odata.id&lt;/code&gt; in the sample above) where clients should PATCH and where committed attributes are visible. Committed attributes are those that user updated, but haven't been applied yet as they are waiting for the system reboot. Having this realization that sushy is not just a dumb serialization library, an idea came that sushy should load this resource automatically when user accesses the property in Python. And I made the update to do it. As the Settings field is re-usable field I had to support that it can create a new instance of its parent type. The code introduced some structures and approaches that were not seen anywhere in the project, so I was not sure that this was the way to go, but the only way to find this out is to submit it for code review. So in the next patch update for Settings field I have a re-usable field that could load a settings resource automatically and dynamically based on parent resource type.&lt;/p&gt;
&lt;p&gt;With both patches updated and submitted I started to wait for code reviewer feedback. I have been warned that code reviews can take a while, so during that I had some other smaller tickets to work on, and later I started to look at the next bigger ticket.&lt;/p&gt;
&lt;p&gt;Looong story short, there were many suggestions how to improve this (still keeping in mind that this is not just serialization library), how to change some things, at one point there was a &lt;code&gt;dict&lt;/code&gt; inherited with &lt;code&gt;__setitem__&lt;/code&gt; override that instead of updating the &lt;code&gt;dict&lt;/code&gt; values, did PATCHing so that sushy user can write &lt;code&gt;attributes['ProcTurboMode'] = 'Disabled'&lt;/code&gt; seamlessly without knowing what magic happens behind. This again introduced a lot of structures not seen anywhere else in the project and in the end it was deemed to be too confusing for user instead of being helpful, for example, with code above why does not attribute value in the dictionary change in the end?&lt;/p&gt;
&lt;p&gt;Somewhere in between, one question remained unanswered regarding &lt;code&gt;@Redfish.Settings&lt;/code&gt; - why isn't this field in the schema of BIOS? What are the other resources that could have this field? &lt;code&gt;grep&lt;/code&gt;ing within provided mockup samples, found another case where Ethernet Interface&lt;a href="https://redfish.dmtf.org/redfish/mockups/v1/863#Managers--BMC--NICs--Dedicated"&gt;[9]&lt;/a&gt; has this field, while other samples of Ethernet Interface did not have this property (e.g., &lt;a href="https://redfish.dmtf.org/redfish/mockups/v1/862#Managers--Blade1BMC--EthernetInterfaces--1"&gt;[10]&lt;/a&gt;). Also in one of the older versions of mockup sample file Readme&lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP2043_1.1.0.zip"&gt;[11]&lt;/a&gt; there was a short intro in Redfish, and it mentioned that this can also be applied to Storage resources, but I haven't any mockup samples for it so far. This raised another question - what does it mean that &lt;code&gt;@Redfish.Settings&lt;/code&gt; field is not present? Does it mean that settings are read-only or that user should patch at the resource itself? The spec was not entirely clear and the Redfish implementations being available on servers which I don't have or have access to, I was not able to check how it works in real life. Talked with mentors, should this be asked in Redfish user forum or are there any other options to find this out, an e-mail thread was started where people with more knowledge on Redfish promptly clarified this - &lt;code&gt;@Redfish.Settings&lt;/code&gt; is payload annotation field that can appear in any resource, but practically it will appear where immediate updates are not possible but restart of a system or a service is necessary. When the field is not present, it means that user can patch against the resource itself (not that it is read-only). BIOS will always have this field, because there are no known BIOS that can apply changes without reboot and not expecting to have any in near future. Ethernet Interfaces and Storage might have it or not, and now it is not expected to appear in any other resources.&lt;/p&gt;
&lt;p&gt;Another thing that came up this week is, how to determine and inform sushy user of attribute update outcome. In the &lt;code&gt;@Redfish.Settings&lt;/code&gt; field there are list of messages returned, time when changes were applied and &lt;code&gt;ETag&lt;/code&gt; of the version the changes were applied. How to know when to check for the messages? Could there be some notifications received when updates are done? As there were more questions than answers, it was decided that in this patch this will not be exposed to sushy user to find a good solution in the next patch.&lt;/p&gt;
&lt;p&gt;In the end with all the magic removed and even both patches merged back together (it was hard to review as it was changing back and forth), current patch versions are very close to the first versions I proposed. They still are in review, but hopefully will be done soon. I feel like I walked around the world to return at the same point, but during the trip I saw places and had some fun with Python.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP2046_2017.0a.pdf"&gt;Redfish Resource and Schema Guide, v.2017.0a (PDF) - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="https://git.openstack.org/cgit/openstack/sushy/commit/?id=8fe2904a62b0f56dc3fc3fefc5a5a746911ce891"&gt;Ethernet Interface sushy patch - git.openstack.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP2046_2018.1_0.pdf"&gt;Redfish Resource and Schema Guide (PDF), v.2018.1 - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4] &lt;a href="https://redfish.dmtf.org/schemas/Bios.json"&gt;Redfish BIOS JSON schema - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[5] &lt;a href="https://redfish.dmtf.org/redfish/schema_index"&gt;Redfish Schema Index - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[6] &lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP0266_1.5.0.pdf"&gt;Redfish Scalable Platforms Management API Specification (PDF) v.1.5.0 - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[7] &lt;a href="http://redfish.dmtf.org/schemas/DSP0266_1.5.0.html"&gt;Redfish Scalable Platforms Management API Specification (HTML) v.1.5.0 - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[8] &lt;a href="http://redfish.dmtf.org/schemas/DSP0266_1.5.0.html#settings"&gt;@Redfish.Settings - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[9] &lt;a href="https://redfish.dmtf.org/redfish/mockups/v1/863#Managers--BMC--NICs--Dedicated"&gt;Simple Rack-mounted Server mockup, Ethernet Interface - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[10] &lt;a href="https://redfish.dmtf.org/redfish/mockups/v1/862#Managers--Blade1BMC--EthernetInterfaces--1"&gt;Bladed System mockup, Ethernet Interface - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[11] &lt;a href="https://www.dmtf.org/sites/default/files/standards/documents/DSP2043_1.1.0.zip"&gt;Scalable Platforms Management API Mockup Readme (ZIP), v.1.1.0 - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ajya</dc:creator><pubDate>Sun, 24 Jun 2018 18:00:00 +0300</pubDate><guid isPermaLink="false">tag:ajya.github.io,2018-06-24:/outreachy-adding-support-for-redfish-bios-resource-in-sushy.html</guid><category>outreachy</category><category>openstack</category></item><item><title>Outreachy: About the project</title><link>https://ajya.github.io/outreachy-about-the-project.html</link><description>&lt;p&gt;When it came to choose a project for which to apply in Outreachy, I was looking for 3 things: mentors are in about the same timezone as me, the project is in tech stack I'm familiar with and want to expand my skills in it, and last but but not least, the project's domain is something interesting and completely new to me.&lt;/p&gt;
&lt;p&gt;With the last point I set myself up for a lot of reading (and some videos). &lt;/p&gt;
&lt;p&gt;At first I felt like that dog in meme 'I have no idea what I'm doing'. To wrap my head around this, I started to draw a picture with some boxes. Here is the result: &lt;/p&gt;
&lt;p&gt;&lt;img alt="diagram: Context of sushy" src="https://ajya.github.io/images/project_overview.png"&gt;&lt;/p&gt;
&lt;p&gt;The project I'm working on is &lt;code&gt;sushy&lt;/code&gt; and &lt;code&gt;sushy-tools&lt;/code&gt; project. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sushy&lt;/code&gt; is related to, but not exactly part of, OpenStack Ironic project which deals with bare metal provisioning. Usually when talking about clouds, talk about virtual machines (VM), but there are cases where VMs do not provide necessary performance, so non-virtualized environment is necessary. Here comes Ironic project to manage bare metal servers in cloud environment - remotely. Ironic can be used independently or together with other OpenStack projects with whom it integrates. &lt;code&gt;sushy&lt;/code&gt; is written in a way that it does not depend on Ironic and can be used by other projects. And Ironic can decide to use something else instead of &lt;code&gt;sushy&lt;/code&gt;. But what does &lt;code&gt;sushy&lt;/code&gt; do? Time to introduce Redfish. &lt;/p&gt;
&lt;p&gt;Redfish is a standard API to work with bare metal servers. It lives in BMC (Baseboard Management Controller) which is a microcontroller (small computer) attached to motherboard of industrial servers. BMC allows to manage servers remotely and Redfish is one of the protocols to do it. The Redfish standard is managed by DMTF (Distributed Management Task Force).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sushy&lt;/code&gt; is a client library in Python for Redfish RESTful web services communicating in JSON. &lt;code&gt;ironic&lt;/code&gt; imports &lt;code&gt;sushy&lt;/code&gt; and uses it as one of the drivers.
&lt;code&gt;sushy&lt;/code&gt; is not the only Python library to consume Redfish API, there are alternatives named very similarly:
python-redfish &lt;a href="https://github.com/openstack/python-redfish"&gt;[5]&lt;/a&gt;
python-redfish-library &lt;a href="https://github.com/DMTF/python-redfish-library"&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Besides &lt;code&gt;sushy&lt;/code&gt; there is also project &lt;code&gt;sushy-tools&lt;/code&gt; which contains emulators for testing &lt;code&gt;sushy&lt;/code&gt;. Otherwise it is challenging for developers to test Redfish as real server with BMC and Redfish is necessary. There are 2 emulators:
&lt;code&gt;sushy-static&lt;/code&gt; which serves static JSON files provided by Redfish project. Mockups can be found at White Papers and Technical Notes section&lt;a href="https://www.dmtf.org/standards/redfish"&gt;[4]&lt;/a&gt; looking for DSP2043. There is Redfish Mockup Creator&lt;a href="https://github.com/DMTF/Redfish-Mockup-Creator"&gt;[7]&lt;/a&gt; to generate mockup files from a real Redfish service. But this is little use to me as I don't have access to real Redfish service, but nice to know just in case.&lt;/p&gt;
&lt;p&gt;Static mockup file emulator is OK for read only testing, but it does not help much when want to test actions where some changes are necessary. In this case there is &lt;code&gt;sushy-emulator&lt;/code&gt; which uses &lt;code&gt;libvirt&lt;/code&gt; driver connecting to virtual machine mimicking real server. &lt;/p&gt;
&lt;p&gt;DMTF also provides similar emulators, both static mockup files&lt;a href="https://github.com/DMTF/Redfish-Mockup-Server"&gt;[8]&lt;/a&gt; and dynamic&lt;a href="https://github.com/DMTF/Redfish-Interface-Emulator"&gt;[9]&lt;/a&gt;. I haven't tried these yet, but might try them out later.
With all the alternatives available, it appears that each project takes different approach, so it is not like they are copies of each other and in the end there is choice.&lt;/p&gt;
&lt;p&gt;Lastly, there are some acronyms that I've seen floating around in relation to Ironic that are not directly related to sushy, but I had to find out what they are and how they are related.&lt;/p&gt;
&lt;p&gt;PXE (Preboot eXecution Environment) is way to boot up servers from network. Computers supporting PXE has NIC (network interface controller) that is up and listening to commands from network even when server itself is turned off.&lt;/p&gt;
&lt;p&gt;IPMI (Intelligent Platform Management Interface) is a way how to manage and monitor servers remotely. &lt;/p&gt;
&lt;p&gt;PXE and IPMI have been used together to deploy servers, but they are supposed to be replaced by newer technologies addressing some of their drawbacks - HTTP Boot and Redfish &lt;a href="https://www.youtube.com/watch?v=L-DQKEHX81Q"&gt;[10]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;libvirt&lt;/code&gt;, already mentioned above, is API to manage virtualization, supporting wide range of hypervisors, including VirtualBox, VMWare, Hyper-V.&lt;/p&gt;
&lt;p&gt;As always, in hindsight this all speaks for itself, but then again while writing this I discovered new places to go though I can avoid them now - this is just enough for &lt;code&gt;sushy&lt;/code&gt;. It will be interesting to revisit this at the end of project and see what has changed in my point of view.&lt;/p&gt;
&lt;p&gt;Next time I will write about first tasks I'm working on that should allow me to tell more about &lt;code&gt;sushy&lt;/code&gt; and Redfish.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="https://wiki.openstack.org/wiki/Ironic"&gt;Ironic project wiki - openstack.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="https://wiki.openstack.org/wiki/Ironic"&gt;Ironic User Guide - openstack.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href="https://docs.openstack.org/sushy/latest/"&gt;Sushy documentation - openstack.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4] &lt;a href="https://www.dmtf.org/standards/redfish"&gt;Redfish API docs - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[5] &lt;a href="https://github.com/openstack/python-redfish"&gt;python-redfish - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[6] &lt;a href="https://github.com/DMTF/python-redfish-library"&gt;python-redfish-library - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[7] &lt;a href="https://github.com/DMTF/Redfish-Mockup-Creator"&gt;Redfish Mockup Creator - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[8] &lt;a href="https://github.com/DMTF/Redfish-Mockup-Server"&gt;Redfish Mockup Server - github.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;[9] &lt;a href="https://github.com/DMTF/Redfish-Interface-Emulator"&gt;Redfish Interface Emulator - github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[10] &lt;a href="https://www.youtube.com/watch?v=L-DQKEHX81Q"&gt;Talk from 2015 UEFI Plugfest. Firmware in the Data Center: Goodbye PXE and IPMI. Welcome HTTP Boot and Redfish! - youtube.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[11] &lt;a href="https://redfish.dmtf.org/redfish/v1"&gt;In-browser Mockup file explorer -  dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[12] &lt;a href="https://redfish.dmtf.org/webinars"&gt;Intro videos about Redfish API - dmtf.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[13] &lt;a href="https://en.wikipedia.org/wiki/Intelligent_Platform_Management_Interface#Baseboard_management_controller"&gt;BMC - wikipedia.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[14] &lt;a href="https://en.wikipedia.org/wiki/Microcontroller"&gt;Microcontroller - wikipedia.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[15] &lt;a href="https://en.wikipedia.org/wiki/Preboot_Execution_Environment"&gt;Preboot Execution Environment - wikipedia.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[16] &lt;a href="https://en.wikipedia.org/wiki/Libvirt"&gt;Libvirt - wikipedia.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ajya</dc:creator><pubDate>Tue, 05 Jun 2018 15:00:00 +0300</pubDate><guid isPermaLink="false">tag:ajya.github.io,2018-06-05:/outreachy-about-the-project.html</guid><category>outreachy</category><category>openstack</category></item><item><title>Outreachy: How I got started with OpenStack development</title><link>https://ajya.github.io/outreachy-how-i-got-started-with-openstack-development.html</link><description>&lt;p&gt;The first week has passed and in this post I will cover what I did to get my first contribution during application phase and some follow up reading afterwards. 
Here I will focus on general tools used in OpenStack development workflow. In next post I will write about the project I'm working on.&lt;/p&gt;
&lt;p&gt;It was easy to start developing for OpenStack projects and almost everything I needed to know is well documented in one long page&lt;a href="https://docs.openstack.org/infra/manual/developers.html"&gt;[1]&lt;/a&gt;. The page contains some links to follow for more detailed information.
One of such pages that I find useful is about commit messages&lt;a href="https://wiki.openstack.org/wiki/GitCommitMessages"&gt;[2]&lt;/a&gt; that not only writes about messages themselves, but about splitting commits in smaller patches where split is reasonable and somewhat isolated rather than creating one large patch which is harder to review for everyone involved. Also commit messages should be self-contained and hold enough information to understand what's being done and why without accessing other systems like issue/bug tracker. This also says that commit message bodies should be wrapped at 72 characters. The main page&lt;a href="https://docs.openstack.org/infra/manual/developers.html"&gt;[1]&lt;/a&gt; only mentions commit message headers that should be 50 characters.&lt;/p&gt;
&lt;p&gt;Then there are specific OpenStack code style guidelines for Python&lt;a href="https://docs.openstack.org/hacking/latest/user/hacking.html"&gt;[3]&lt;/a&gt; that also references the general Python style guide, PEP 8&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;[4]&lt;/a&gt;. Here I'm relying on &lt;code&gt;tox&lt;/code&gt; to catch any violations.&lt;/p&gt;
&lt;p&gt;To write some code, I cloned the necessary projects, branched, and made some changes. There were some tools missing from my development environment that I installed as I went by, and I did not encounter any setup related issues when running projects.&lt;/p&gt;
&lt;p&gt;Once the changes are done, the next step is to submit it for code review. &lt;/p&gt;
&lt;p&gt;Gerrit is used  for code review, it used to be written in Python, but was rewritten in Java. Wikipedia says&lt;a href="https://en.wikipedia.org/wiki/Gerrit_(software)#History"&gt;[5]&lt;/a&gt; that it was done to make it easier to run on different Linux systems, but it does not give any reference to source and a quick search online did not help me to find any historical discussions, but this is not so important here, was just curious.
More about Gerrit it is written at &lt;a href="https://review.openstack.org/Documentation/intro-quick.html"&gt;[6]&lt;/a&gt;. Gerrit distinguishes between core reviewers and regular reviewers, something that I have not seen in other tools where coders enforce it manually. In such cases, it is not like they try to bypass core reviewer requirement (as system does not enforce it), but it makes hard to identify open code reviews that are missing core reviewers, so it is nice that Gerrit has this built-in.&lt;/p&gt;
&lt;p&gt;There is a handy tool git-review&lt;a href="https://docs.openstack.org/infra/git-review/"&gt;[7]&lt;/a&gt; to make work with Gerrit easier - to submit code review just run &lt;code&gt;git review&lt;/code&gt; instead of following instructions in Gerrit's quick intro&lt;a href="https://review.openstack.org/Documentation/intro-quick.html"&gt;[6]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once code review submitted Zuul&lt;a href="https://docs.openstack.org/infra/zuul/"&gt;[8]&lt;/a&gt; gets involved. Don't have to interact with this much, but Zuul will be the one who will tell if there are tests failing and PEP 8 guidelines violated. This should have been checked locally before submitting code review, but there are always more integrations to run and other issues that might not show up in local environment. As there are many patches submitted within the same time frame, Zuul will queue them and test queued patches together according to their place in queue to catch any conflicts between patches before they get merged to master.
Then when code review is done and usually it requires 2 core code reviewers to approve, the Zuul will merge the changes to master.&lt;/p&gt;
&lt;p&gt;That's all for now, if I encounter something new or something I misunderstood in relation to workflow and tools, will share it in further posts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1] &lt;a href="https://docs.openstack.org/infra/manual/developers.html"&gt;OpenStack development manual - https://docs.openstack.org/infra/manual/developers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="https://wiki.openstack.org/wiki/GitCommitMessages"&gt;Git messages guidelines - https://wiki.openstack.org/wiki/GitCommitMessages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href="https://docs.openstack.org/hacking/latest/user/hacking.html"&gt;OpenStack Python style guidelines - https://docs.openstack.org/hacking/latest/user/hacking.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4] &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;Python style guidelines - https://www.python.org/dev/peps/pep-0008/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[5] &lt;a href="https://en.wikipedia.org/wiki/Gerrit_(software)#History"&gt;Gerrit History in Wikipedia - https://en.wikipedia.org/wiki/Gerrit_(software)#History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[6] &lt;a href="https://review.openstack.org/Documentation/intro-quick.html"&gt;Gerrit quick intro - https://review.openstack.org/Documentation/intro-quick.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[7] &lt;a href="https://docs.openstack.org/infra/git-review/"&gt;git-review tool - https://docs.openstack.org/infra/git-review/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[8] &lt;a href="https://docs.openstack.org/infra/zuul/"&gt;Zuul documentation - https://docs.openstack.org/infra/zuul/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ajya</dc:creator><pubDate>Sun, 20 May 2018 18:00:00 +0300</pubDate><guid isPermaLink="false">tag:ajya.github.io,2018-05-20:/outreachy-how-i-got-started-with-openstack-development.html</guid><category>outreachy</category><category>openstack</category></item><item><title>Hello Outreachy</title><link>https://ajya.github.io/hello-outreachy.html</link><description>&lt;p&gt;Hello World, this is my first blog post for my journey as Outreachy intern at OpenStack "Extend Redfish hardware provisioning tooling for Python" project.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ajya</dc:creator><pubDate>Sun, 29 Apr 2018 18:00:00 +0300</pubDate><guid isPermaLink="false">tag:ajya.github.io,2018-04-29:/hello-outreachy.html</guid><category>outreachy</category><category>openstack</category></item></channel></rss>